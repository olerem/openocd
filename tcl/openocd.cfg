#source [find busblaster.cfg]
#source [find interface/ftdi/dp_busblaster.cfg]
#source [find interface/stlink.cfg]
#adapter usb location "1-2.3"
#source [find interface/jlink.cfg]
#source [find interface/ftdi/jtagkey2.cfg]
source [find interface/pickit3.cfg]
#adapter_khz 500
#adapter_khz 500
adapter_khz 1000
#jtag_khz 100
#jtag_khz 50
#jtag_khz 100
#source [find ar9331.cfg]
#source [find rtl8186.cfg]
#source [find ar2315.cfg]
#source [find ar2313.cfg]
#source [find ar2317.cfg]
#source [find bcm7401.cfg]
#source [find rt3352.cfg]
transport select jtag
#transport select hla_swd
#reset_config trst_and_srst srst_pulls_trst
#source [find board/dptechnics_dpt-board-v1.cfg]
source [find target/imx6ul.cfg]

#set _TARGETNAME rtl8186.cpu

#$TARGETNAME configure -work-area-phys 0xa0000000 -work-area-size 0x300
#$TARGETNAME configure -work-area-phys 0xa0bffd00 -work-area-size 0x300

proc my_bs {} {
	source manual_bs.tcl
	init_bs rtl8186.cpu
	#init_bs $_TARGETNAME 
}

proc my_bsdiff {} {
	prepare_detect_bsrchange
	sleep 3000
	show_bsrchange
}

proc my_ecr {} {
	irscan rtl8186.cpu 0x0A
	drscan rtl8186.cpu 32 0x208000
	#drscan rtl8186.cpu 32 0x20c000
}

proc my_ecr_d {} {
	irscan rtl8186.cpu 0x0A
	drscan rtl8186.cpu 32 0x209000
	#drscan rtl8186.cpu 32 0x20d000
}

# address insctruct
proc my_dcr {} {
	irscan rtl8186.cpu 0x08
	drscan rtl8186.cpu 32 0xFF300000
	irscan rtl8186.cpu 0x0A
	drscan rtl8186.cpu 32 0x00228b00
	irscan rtl8186.cpu 0x09
	drscan rtl8186.cpu 32 0x00000000
}

proc my_cpu {} {
	mips_m4k cp0 15 0
}

proc my_load {} {
        halt
	load_image barebox.bin 0x82000000 bin
	resume 0x82000000
}


proc my_pre {} {
        halt
        load_image pre.bin 0xbd001000 bin
        resume 0xbd001000
}

proc my_zload {} {
        halt
	load_image zbarebox.bin 0x80000000 bin
	step 0x80000000
	step
	step
	resume
	#resume 0x80000000
}

proc my_flash {} {
        halt
	flash probe flash0
	flash write_image erase  unlock zbarebox.bin 0x0
}

proc my_trace_pc {} {
	set pc 0
	set sp_old [ocd_reg 29]
	regsub {r29[^:]*: } $sp_old "" sp_old
	while 1 {
		set pc [ocd_reg pc]
		regsub {pc[^:]*: } $pc "" pc
		if { $pc > 0x80000000 && $pc < 0x8000ffff } break
		set sp [ocd_reg 29]
		regsub {r29[^:]*: } $sp "" sp
	#	if { $sp != $sp_old } break

		step
	}
}
