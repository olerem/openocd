#
# Digilent WiFIRE - Rev D
# The WiFIRE has a digital switch to allow JTAG debug from
# a MIPI 20-pin connector (default) or via FTDI chip which,
# being initialized from the host running this configuration file,
# programs the switch to use the FTDI JTAG control.
#
# Available at - http://www.digilentinc.com/wifire
# Manufacture -  http://www.digilent.com
#
interface ftdi
transport select jtag

# look for the Digilent WiFIRE device
ftdi_device_desc "Digilent WiFIRE"

# the JTAG port is on channel 0 (A) of the FTDI chip
ftdi_channel 0

# The WiFIRE must use the FTDI PID/VID to load the
# FTDI usb to serial driver without the need
# for another signed .inf
ftdi_vid_pid 0x0403 0x6010

# The Pin layout is as follows
# X - unused
# XXXX XXX(nRSET) (OE)XXX (TMS)(TDO)(TDI)(TCK)
# Pin Direction X- unused, O - output, I - input
# XXXX XXXO OXXX OIOO => 0000 0001 1000 1011 => 0x018B
# Pin state 0 - low, 1 - high
# to select the FTDI chip for JTAG OE == Low
# we want to keep MCLR == High
# TMS == high, TDO is input, TDI == low, TCK == Low/Idle
# 0000 0001 0000 1000 => 0x0108
ftdi_layout_init 0x0108 0x018B

# The WiFIRE has no nTRST
# ftdi_layout_signal nTRST -data 0x0000

# MCLR is on 0000 0001 0000 0000 => 0x0100shu
# we are connected directly to the pin
# the documentation says to specify -data and -oe identically
# so all states, Hi/Low/Tri-State can be defined
# there is a pull up resistor on the MCLR, so this works.
ftdi_layout_signal nSRST -data 0x0100 -oe 0x0100

# OE is on 0000 0000 1000 0000 => 0x0080
ftdi_layout_signal GPIOL3 -data 0x0080

# How fast TCK can run 
# in theory we can run the MZ at 40nsTCK period or 25MHz
# The closest value the FTDI will run at is 15MHz
# adapter_khz 15000

# set the device ID for this device so the target will find it
set CPUTAPID 0x1720e053

# we can run faster than the bus blaster, so set
# the adaptor speed to 15000 KHz
set ADPTSPEED 15000
